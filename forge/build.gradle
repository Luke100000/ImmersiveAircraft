plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        mixinConfig "immersive_aircraft.mixins.json"

        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
    inputs.property "META-INF/mods.toml", project.version
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "immersive_aircraft.accessWidener"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    afterEvaluate {
        [":common"].forEach {
            def depSources = project(it).sourcesJar
            dependsOn depSources
            from(depSources.archiveFile.map { zipTree(it) }) {
                exclude "immersive_aircraft.accessWidener"
            }
        }
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

// Update mods.toml with the new versions automatically
// Not using processResources because it is easier to do this manually, and see it reflected immediately
afterEvaluate {
    file("src/main/resources/META-INF/mods.toml").withOutputStream {
        it << file("mods.toml").text
                .replaceAll("@LOADER_MAJOR@", rootProject.forge_version.split("\\.")[0])
                .replaceAll("@MINECRAFT_VERSION@", rootProject.architectury.minecraft)
                .replaceAll("@FORGE_VERSION@", rootProject.forge_version)
    }
}